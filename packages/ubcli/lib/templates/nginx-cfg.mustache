{{#wsRoot}}
# This is intended to websocket connection upgrade
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}
{{/wsRoot}}
upstream {{{sendFileLocationRoot}}} {
    server {{{ubURL.host}}} max_fails=2 fail_timeout=30;
    {{#lb}}
    # add more server entry here
    ip_hash;
    {{/lb}}
    keepalive 32;
}

server {
    listen       {{{externalURL.port}}};
    {{#ipv6}}
    listen       [::]:{{{externalURL.port}}};
    {{/ipv6}}
    {{#sslkey}}
    ssl_certificate     {{{sslcert}}};
    ssl_certificate_key {{{sslkey}}};

    #Protect against the BEAST and POODLE attacks by not using SSLv3 at all. If you need to support older browse
    # SSLv3 to the list of protocols below.
    ssl_protocols              TLSv1 TLSv1.1 TLSv1.2;

    # Ciphers set to best allow protection from Beast, while providing forwarding secrecy, as defined by Mozilla
    ssl_ciphers                ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-S
    ssl_prefer_server_ciphers  on;

    # Optimize SSL by caching session parameters for 10 minutes. This cuts down on the number of expensive SSL ha
    # The handshake is the most CPU-intensive operation, and by default it is re-negotiated on every new/parallel
    # By enabling a cache (of type "shared between all Nginx workers"), we tell the client to re-use the already
    # Further optimization can be achieved by raising keepalive_timeout, but that shouldn't be done unless you se
    ssl_session_cache    shared:SSL:10m; # a 1mb cache can hold about 4000 sessions, so we can hold 40000 session
    ssl_session_timeout  24h;

    # Use a higher keepalive timeout to reduce the need for repeated handshakes
    keepalive_timeout 300s; # up from 75 secs default
    {{/sslkey}}

    server_name {{{externalURL.hostname}}};

    # prevent nginx version exposing in Server header
    server_tokens off;

    # Enable gzip compression.
    # Default: off
    gzip on;

    # Compression level (1-9).
    # 5 is a perfect compromise between size and CPU usage, offering about
    # 75% reduction for most ASCII files (almost identical to level 9).
    # Default: 1
    gzip_comp_level    5;

    # Don't compress anything that's already small and unlikely to shrink much
    # if at all (the default is 20 bytes, which is bad as that usually leads to
    # larger files after gzipping).
    # Default: 20
    gzip_min_length    256;

    # Compress data even for clients that are connecting to us via proxies,
    # identified by the "Via" header (required for CloudFront).
    # Default: off
    gzip_proxied       any;

    # Tell proxies to cache both the gzipped and regular version of a resource
    # whenever the client's Accept-Encoding capabilities header varies;
    # Avoids the issue where a non-gzip capable client (which is extremely rare
    # today) would display gibberish if their proxy gave them the gzipped version.
    # Default: off
    gzip_vary          on;

    # Compress all output labeled with one of the following MIME-types.
    # text/html is always compressed by gzip module.
    # UB is already gziping JSONs
    # Default: text/html
    gzip_types text/plain text/css application/javascript application/ubreport application/def;


    proxy_set_header    Host    $host;
    # Tell UB real IP address of client
    proxy_set_header    {{remoteIPHeader}}  $realip_remote_addr;
    proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
    # Do not rewrite a URL while pass it to UB
    proxy_redirect      off;
    # Let's UB handle errors
    proxy_intercept_errors on;

    {{#lb}}
    # select a news upstream from group in case current is not accessible
    proxy_next_upstream     error timeout invalid_header;
    # short connection timeout (UB http request buffer is overflow)
    proxy_connect_timeout   2;
    {{/lb}}
    # proxy all requests to the UB backend
    location / {
        proxy_pass          http://{{{sendFileLocationRoot}}};
    }
    {{#wsRoot}}
    # proxy WebSokets
    location /{{{wsRoot}}} {
        proxy_pass          http://{{{sendFileLocationRoot}}};
        proxy_http_version  1.1;
        proxy_set_header    Upgrade $http_upgrade;
        proxy_set_header    Connection "";
    }
    {{/wsRoot}}
    # override client_max_body_size for setDocument endpoint
    location /setDocument {
        proxy_pass          http://{{{sendFileLocationRoot}}};
        client_max_body_size    {{maxDocBodySize}};
    }
{{#sendFileHeader}}
    # application internal location for endpoints clientRequire, mdb, models, static
    # warning - mtime for files inside ./node_modules should be modified to current date instead of 1985-10-26T08:15:00Z
    location /{{sendFileLocationRoot}}/app {
        internal;
        # 10 minutes browser cache expires
        # for development environment replace by expires -1;
        expires 600;
        alias {{{appPath}}};
    }
    # BLOB stores internal locations
    {{#blobStores}}
    location /{{sendFileLocationRoot}}/{{storeName}} {
        internal;
        # force browser to ask what data is not modified on server on every request
        expires -1;
        add_header Cache-Control "must-revalidate, private";
        alias {{{storePath}}};
    }
    {{/blobStores}}
{{/sendFileHeader}}
    #In case of load balancing upstream  in UB config httpServer.requestQueueLength should be decreased to 100
    # and recommended config is:
    #location / {
    #  proxy_pass              http://balancing_upstream;
    #  proxy_next_upstream     error timeout invalid_header;
    #  proxy_connect_timeout   2;
    #  proxy_set_header        Host            $host;
    #  proxy_set_header        X-Real-IP       $remote_addr;
    #  proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    #}
}

{{#sslRedirect}}
# redirect all http to https
server {
    listen       80;
    server_name  {{{externalURL.hostname}}};
    return 301 https://$host$request_uri;
}
{{/sslRedirect}}