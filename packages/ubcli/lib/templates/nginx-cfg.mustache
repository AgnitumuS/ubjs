server {
    listen       {{{nginxURL.port}}};
    {{#ipv6}}
    listen       [::]:{{{nginxURL.port}}};
    {{/ipv6}}
    {{#sslkey}}
    ssl_certificate     {{{sslcert}}};
    ssl_certificate_key {{{sslkey}}};
    {{/sslkey}}

    server_name {{{nginxURL.hostname}}};

    # prevent nginx version exposing in Server header
    server_tokens off;

    # gzip css & js. UB is already gziping JSONs
    gzip on;
    gzip_proxied any;
    gzip_types text/plain text/css application/javascript;


    proxy_set_header    Host    $host;
    proxy_set_header    {{remoteIPHeader}}  $realip_remote_addr;
    proxy_redirect      off;

    # proxy all requests to the UB backend
    location / {
        proxy_pass          {{{ubURL}}};
    }
    # override client_max_body_size for setDocument endpoint
    location /setDocument {
        proxy_pass          {{{ubURL}}};
        client_max_body_size    {{maxDocBodySize}};
    }
{{#sendFileHeader}}
    # application internal location for clientRequire, mdb, models etc
    location /{{sendFileLocationRoot}}/app {
        internal;
        expires 30m; # check for new versions once per 30 minutes. For DEV set it to 0
        alias {{{appPath}}};
    }
    # BLOB stores internal locations
    {{#blobStores}}
    location /{{sendFileLocationRoot}}/{{storeName}} {
        internal;
        # force browser to ask what data is not modified on server on every request
        expires 0;
        add_header Cache-Control "must-revalidate, private";
        alias {{{storePath}}};
    }
    {{/blobStores}}
{{/sendFileHeader}}
    #In case of load balancing upstream  in UB config httpServer.requestQueueLength should be decreased to 100
    # and recommended config is:
    #location / {
    #  proxy_pass              http://balancing_upstream;
    #  proxy_next_upstream     error timeout invalid_header;
    #  proxy_connect_timeout   2;
    #  proxy_set_header        Host            $host;
    #  proxy_set_header        X-Real-IP       $remote_addr;
    #  proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    #}
}

{{#sslRedirect}}
# redirect all http to https
server {
    listen       80;
    server_name  {{{nginxURL.hostname}}};
    return 301 https://$host$request_uri;
}
{{/sslRedirect}}