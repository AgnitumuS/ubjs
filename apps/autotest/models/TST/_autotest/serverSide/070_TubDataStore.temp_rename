var assert = require('assert'),
    ok = assert.ok,
    ITERATIONS=1,
    res;
    
var 
  obj = {
    intFld: 12, 
    strFld: 'strVal', 
    floatFld: 1.22 
  };
var arrElm = _.values(obj);

var 
  dataObjArr = [], dataArrArr = [], dataFlatten = {}, i, j, k;
  
  
for(i=0; i<100; i++){
  obj = {
    intFld: i, 
    strFld: 'strVal' + i, 
    floatFld: i/3 
  };
  
  dataObjArr.push(obj);
  dataArrArr.push(_.values(obj));
}
dataFlatten = Object.keys(obj).concat(_.flatten(dataArrArr));
  
var store = new TubDataStore('uba_user');

console.time('TubDataStore.initFromJSON obj array');
for(i=0; i<ITERATIONS; i++){
  //try{
  store.initFromJSON(dataObjArr);
//  } catch(e){
//    console.log(JSON.stringify(dataObjArr));
//  }  
}
console.timeEnd('TubDataStore.initFromJSON obj array');

console.time('TubDataStore.initFromJSON flatten');
for(i=0; i<ITERATIONS; i++){
  store.initFromJSON({fieldCount: 3, rowCount: dataArrArr.length, values: dataFlatten});  
}
console.timeEnd('TubDataStore.initFromJSON flatten');

console.time('TubDataStore.initialize obj array');
for(i=0; i<ITERATIONS; i++){
  store.initialize(dataObjArr);  
}
console.timeEnd('TubDataStore.initialize obj array');

res = JSON.parse(store.asJSONObject);
assert.deepEqual(dataObjArr, res);

console.time('TubDataStore.initialize arr-of-arr');
for(i=0; i<ITERATIONS; i++){
  store.initialize(dataArrArr, Object.keys(obj));  
}
console.timeEnd('TubDataStore.initialize arr-of-arr');
res = JSON.parse(store.asJSONObject);
assert.deepEqual(dataObjArr, res);

console.time('TubDataStore.initialize dataFlatten');
for(i=0; i<ITERATIONS; i++){
  store.initialize({fieldCount: 3, rowCount: dataArrArr.length, values: dataFlatten});  
}
console.timeEnd('TubDataStore.initialize dataFlatten');
res = JSON.parse(store.asJSONObject);
assert.deepEqual(dataObjArr, res);

//check undefined
dataObjArr.push({
    intFld: 12, 
    strFld: undefined, 
    floatFld: 1.22 
  });
store.initialize(dataObjArr);  
res = JSON.parse(store.asJSONObject);
assert.deepEqual(res[dataObjArr.length-1], {intFld: 12, strFld: null, floatFld: 1.22}); 

store.initialize([]);
assert.ok(store.eof);
assert.ok(store.bof);
assert.ok(store.initialized);
res = JSON.parse(store.asJSONArray); //{"fields":["ID"],"rowCount": 0, "data":[]} 
assert.deepEqual(res.fields, ['ID']);
assert.equal(res.rowCount, 0);
assert.deepEqual(res.data, []);


store.initialize([], ['code', 'name']);
assert.ok(store.eof);
assert.ok(store.bof);
assert.ok(store.initialized);
res = JSON.parse(store.asJSONArray); //{"fields":["code","name"],"rowCount": 0, "data":[]} 
assert.deepEqual(res.fields, ['code', 'name']);
assert.equal(res.rowCount, 0);
assert.deepEqual(res.data, []);

// mapping for array of object 
store.initialize(dataObjArr, ["floatFld", {from: 'strFld', to: 'a'}]);
res = JSON.parse(store.asJSONObject);
assert.deepEqual(res[11], {floatFld: 11/3, a: 'strVal' + 11});

// mapping for array of array 
store.initialize(dataArrArr, [{from: 2, to: "floatFld"}, {from: 0, to: 'ai'}]);
res = JSON.parse(store.asJSONObject);
assert.deepEqual(res[11], {floatFld: 11/3, ai: 11});

assert.doesNotThrow(function(){
	var repo = new TubDataStore('org_organization');
	UB.Repository('uba_user').attrs(['ID', 'name']).where('ID', '=', 10).select(repo);
}, 
'check DataStore.run switch the entity to specified in request even if created with other');

assert.doesNotThrow(function(){
  var repo = new TubDataStore('org_organization');
  repo.runSQL('select id, name from uba_user where id = :(10): or name = ? or name = :username:', {username: 'testelsuser', p3: 'otp_testuser1'})
}, 
'parseInlineParams correctly parse a mixed parameters ? :(): and :name:');
   

return {res: true};