// @! "do not remove comments below unless you know what you do!"
// @isDefault "false"
// @entity "tst_service"
// @formType "custom"
// @caption "Test IIT Sign"
// @description "Test IIT Sign"
// @code "tst_service-IITSign"
// @ID "3000000004904"
exports.formDef = 'TST.IITSign'

Ext.define('TST.IITSign', {
  extend: 'Ext.form.Panel',

  items: [{
    xtype: 'filefield',
    name: 'selFile',
    fieldLabel: 'File',
    labelWidth: 100,
    msgTarget: 'side',
    allowBlank: false,
    anchor: '95%',
    buttonText: 'Select File...',
    ubID: 'dataFile'
  }, {
    xtype: 'textarea',
    fieldLabel: 'Signature',
    labelWidth: 100,
    height: 300,
    anchor: '95%',
    ubID: 'signature',
    items: [{
      xtype: 'textareafield',
      grow: true,
      name: 'message',
      fieldLabel: 'Message',
      anchor: '100%'
    }]
  }, {
    xtype: 'textarea',
    fieldLabel: 'Output data',
    labelWidth: 100,
    height: 300,
    anchor: '95%',
    ubID: 'resultData',
    items: [{
      xtype: 'textareafield',
      grow: true,
      name: 'message',
      fieldLabel: 'Message',
      anchor: '100%'
    }]
  }, {
    xtype: 'button',
    width: 150,
    ubID: 'doValidate',
    text: 'Verify signature'
  }, {
    xtype: 'container',
    layout: {
      type: 'hbox',
      defaultMargins: {
        left: 2
      }
    },
    items: [{
      xtype: 'button',
      width: 150,
      ubID: 'doSign',
      text: 'Sign'
    }, {
      xtype: 'filefield',
      name: 'selFile',
      fieldLabel: '',
      labelWidth: 150,
      msgTarget: 'side',
      allowBlank: false,
      anchor: '0%',
      width: 150,
      buttonText: 'Load signature',
      buttonOnly: true,
      buttonConfig: {
        width: 150
      },
      ubID: 'doLoadSign',
      listeners: {
        afterrender: function (sender) {
          var
            me = sender.up('component').up('component'); var onFileSelect

          onFileSelect = function (evt) {
            var file = evt.target.files[0]
            UB.base64fromAny(file).then(function (b64) {
              me.down('component[ubID="signature"]').setValue(b64)
            })
          }

          sender.getEl().dom.addEventListener('change', onFileSelect, false)
          sender.inputEl.on('click', function () {
            this.button.fileInputEl.dom.click()
          }, sender)
        },
        scope: this
      }
    }, {
      xtype: 'button',
      width: 150,
      ubID: 'doSaveSign',
      text: 'Save signature to server'
    }]
  }],

  initComponent: function () {
    var me = this
    me.callParent(arguments)
    // debugger;

    me.down('component[ubID="doSign"]').handler = function () {
      let f = me.down('component[ubID="dataFile"]').fileInputEl.dom.files[0]
      me.mask('Signing')
      return UB.file2Uint8Array(f).then(fArray => {
        return $App.connection.pki().then(pki => {
          return pki.sign(fArray)
        })
      }).then(signature => {
        me.down('component[ubID="signature"]').setValue(signature)
      }).catch(e => {
        throw new UB.UBError(e.message)
      }).finally(() => me.unmask())
    }

    me.down('component[ubID="doValidate"]').handler = function () {
      let f = me.down('component[ubID="dataFile"]').fileInputEl.dom.files[0]
      if (!f) throw new UB.UBError('Please, select file to validate')
      me.mask('Verifying')
      return UB.file2Uint8Array(f).then(fArray => {
        return $App.connection.pki().then(pki => {
          return Promise.all([
            pki.verify(me.down('component[ubID="signature"]').value, fArray),
            pki.verify(me.down('component[ubID="signature"]').value, undefined)
          ])
        })
      }).then(([verificationResult, onlySignatureResult]) => {
        me.down('component[ubID="resultData"]').setValue(JSON.stringify(verificationResult, null, ' '))
        $App.connection.pki().then(pki => {
          pki.verificationUI(
            [verificationResult, onlySignatureResult],
            ['<strong>First signature</strong>', 'Signature w/o doc']
          )
        })
      }).finally(() => me.unmask())
    }

    me.down('component[ubID="doSaveSign"]').handler = function () {
      var buf = UB.base64toArrayBuffer(me.down('component[ubID="signature"]').value)
      $App.connection.post('echoToFile', buf).fail(function () {
        return null
      })
      $App.dialog('File is saved on server', 'You can find it in folder of your TST model by path <b>\\_autotest\\fixtures\\req</b>', { buttons: 1 })
    }
  }
})
